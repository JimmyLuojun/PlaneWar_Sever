"""Ensure Score model has level column

Revision ID: 845454af1341
Revises: c3c18341df31 # <-- Make sure this matches the previous migration ID in your project
Create Date: 2025-05-03 XX:XX:XX.XXXXXX # <-- Date will vary

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '845454af1341'
down_revision = 'c3c18341df31' # <-- Make sure this matches the previous migration ID
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('scores', schema=None) as batch_op:
        # Add the level column, making it non-nullable BUT providing a server_default
        # for existing rows during this specific upgrade operation.
        batch_op.add_column(sa.Column('level', sa.Integer(), nullable=False, server_default='1')) # MODIFIED LINE
        # Ensure timestamp is not nullable (Alembic detected this change)
        batch_op.alter_column('timestamp',
               existing_type=sa.DATETIME(),
               nullable=False)
        # Create indexes detected by Alembic
        batch_op.create_index(batch_op.f('ix_scores_level'), ['level'], unique=False)
        batch_op.create_index(batch_op.f('ix_scores_user_id'), ['user_id'], unique=False) # Added if not present
        # Drop the old column if it exists and was detected for removal
        # Check if 'level_reached' was actually in your previous model before uncommenting/adding drop
        # If you just renamed 'level_reached' to 'level' in the model without telling Alembic,
        # you might need to handle data migration manually or adjust this.
        # Assuming Alembic correctly detected removal:
        batch_op.drop_column('level_reached')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('scores', schema=None) as batch_op:
        # Add the old column back if needed for downgrade
        batch_op.add_column(sa.Column('level_reached', sa.INTEGER(), nullable=True)) # Adjust type if needed
        # Drop indexes
        batch_op.drop_index(batch_op.f('ix_scores_user_id')) # Added if created in upgrade
        batch_op.drop_index(batch_op.f('ix_scores_level'))
        # Make timestamp nullable again if it was changed
        batch_op.alter_column('timestamp',
               existing_type=sa.DATETIME(),
               nullable=True) # Assuming it was nullable before
        # Drop the new level column
        batch_op.drop_column('level')

    # ### end Alembic commands ###
